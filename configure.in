dnl Process this file with autoconf to produce a configure script.
AC_INIT
AC_CONFIG_SRCDIR([action.c])

dnl Checks for programs.
AC_CANONICAL_TARGET([])
AC_PROG_CC
AM_INIT_AUTOMAKE([aixblast-tnt], 2.10.13)
AC_CONFIG_HEADER(config.h)
AM_GNU_GETTEXT([external])

CPPFLAGS="$CPPFLAGS -Wall "
XBLAST_CC_SET_CFLAGS()

AC_PROG_INSTALL
AC_PATH_X
AC_PATH_XTRA
if test x$have_x = xyes ; then
    CPPFLAGS="$CPPFLAGS $X_CFLAGS"
    LDFLAGS="$LDFLAGS $X_LIBS"
fi
if test x$build_cpu = xsparc ; then
	 CPPFLAGS="$CPPFLAGS -Dsparc"
fi
case "${target_os}" in
  solaris*)
    LDFLAGS="$LDFLAGS -lX11 -lsocket -lnsl"
    ;;
  cygwin*)
    LIBS="$LIBS $LIBINTL"
    ;;
esac
AC_TYPE_PID_T
AC_TYPE_SIZE_T
AC_C_CONST
dnl AC_DEFINE_UNQUOTED(DATADIR, "$datadir")
dnl Check whether we want X11 or SDL
AC_ARG_ENABLE([sdl],[  --enable-sdl, enable compilation with SDL], [
case "${enableval}" in
  yes) sdl=true
  CFLAGS="$CFLAGS -DSDL `sdl-config --cflags`"
  LDFLAGS="$LDFLAGS "
  LIBS="$LIBS `sdl-config --libs`";;

  no)  sdl=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-sdl) ;;
esac],[sdl=false])
AM_CONDITIONAL(SDL, test x$sdl = xtrue)

if test x$sdl = xfalse ; then
  dnl Replace `main' with a function in -lICE:
  AC_CHECK_LIB(ICE, main)
  dnl Replace `main' with a function in -lX11:
  AC_CHECK_LIB(X11, main)
else
  SDL_VERSION=1.2.0
  AM_PATH_SDL($SDL_VERSION, : , AC_MSG_ERROR([*** SDL version $SDL_VERSION not found!]))
  AC_CHECK_LIB(SDL_image, main,,
  [
  AC_MSG_ERROR(Cannot find required library SDL-image.)
  exit 1;
  ]
  )
  AC_CHECK_LIB(SDL_ttf, main,,
  [
  AC_MSG_ERROR(Cannot find required library SDL-ttf.)
  exit 1;
  ]
  )
  AC_CHECK_LIB(SDL_mixer, main,,
  [
  AC_MSG_ERROR(Cannot find required library SDL-mixer.)
  exit 1;
  ]
  )
  AC_CHECK_LIB(SDL_net, main)dnl,,
 dnl [
dnl  AC_MSG_ERROR(Cannot find required library SDL-net.)
 dnl exit 1;
dnl  ]
 dnl )
  AC_CHECK_LIB(SDL_gfx, main,,
  [
  AC_MSG_ERROR(Cannot find required library SDL-gfx.)
  exit 1;
  ]
  )
fi

dnl Checks for libraries.
AC_CHECK_LIB(m, main)

dnl Checks for header files.
AC_HEADER_DIRENT
AC_HEADER_STDC
AC_HEADER_SYS_WAIT
AC_CHECK_HEADERS(fcntl.h limits.h sys/ioctl.h sys/time.h unistd.h sys/audio.h sys/soundcard.h linux/soundcard.h machine/soundcard.h)

AH_TEMPLATE([GAME_DATADIR], [for packed])
game_datadir=
AC_ARG_ENABLE([admin],[  --enable-admin, data will be installed (and can be only started from) $prefix/share/games/XBlast-TNT/], MY_EXPAND_DIR(game_datadir, "$datadir"))
 AC_ARG_WITH([otherdatadir],[  --with-otherdatadir=OTHERDATADIR            If you dont want that the data go to: $prefix/share/games/XBlast-TNT/],
game_datadir="$with_otherdatadir",
if test x$game_datadir = x ; then
game_datadir="./"
fi )

dnl AC_DEFINE_UNQUOTED( [GAME_DATADIR]  , ["$game_datadir"] , ["a comment here"] )
datadir=$game_datadir;

CFLAGS="$CFLAGS -DGAME_DATADIR=\\\"$datadir\\\""
AC_SUBST(datadir)
AC_SUBST(game_datadir)

AH_TEMPLATE([XBLAST_CHAT_FILTER],[for bad word chat filters])
AC_ARG_ENABLE([chat-filter],AS_HELP_STRING([--enable-chat-filter],[Enables the bad word chat filters.]), [
  case "${enableval}" in
	  (yes) AC_MSG_RESULT([configured with bad word chat filters.])
		    AC_DEFINE(XBLAST_CHAT_FILTER)
		    ;;
	  (no)  AC_MSG_RESULT([configured without bad word chat filters.])
		    ;;
	  (*)   AC_MSG_ERROR([Bad value ${enableval} given for --enable-chat-filter.])
		    ;;
  esac],[
AC_MSG_RESULT([configured with bad word chat filters.])
AC_DEFINE(XBLAST_CHAT_FILTER)])

AC_ARG_ENABLE([sound],[  --enable-sound, enable compilation of xbsndsrv!], [
case "${enableval}" in
  yes) xbsndsrv=true
  CFLAGS="$CFLAGS -DXBLAST_SOUND";;
  no)  xbsndsrv=false ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-sound) ;;
esac],[xbsndsrv=false])
AM_CONDITIONAL(XBSNDSRV, test x$xbsndsrv = xtrue)

AC_ARG_ENABLE([mini],[  --enable-mini, enable compilation with -DMINI!], [
case "${enableval}" in
  yes) CFLAGS="$CFLAGS -DMINI_XBLAST"
  mini=true;;
  no) mini=false  ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-mini) ;;
esac],mini=false)

AC_ARG_ENABLE([nat],[  --enable-nat, enable compilation with -DDEBUG_NAT!], [
case "${enableval}" in
  yes) CFLAGS="$CFLAGS -DDEBUG_NAT"
  nat=true;;
  no) nat=false  ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-nat) ;;
esac],nat=false)

AC_ARG_ENABLE([SMPF],[  --enable-SMPF, enable compilation with -DSMPF (for 16 players)!], [
case "${enableval}" in
  yes) CFLAGS="$CFLAGS -DSMPF"
  smpf=true;;
  no) smpf=false  ;;
  *) AC_MSG_ERROR(bad value ${enableval} for --enable-smpf) ;;
esac],smpf=false)
dnl AC_DEFINE_UNQUOTED(XBSNDSRV, "$xbsndsrv")

dnl CFLAGS="$(CFLAGS)" -DDATADIR="$(datadir)"
dnl Checks for typedefs, structures, and compiler characteristics.

AC_HEADER_TIME
AC_STRUCT_TM

dnl Checks for library functions.
AC_PROG_GCC_TRADITIONAL
AC_FUNC_MEMCMP
AC_TYPE_SIGNAL
AC_FUNC_STRFTIME
AC_FUNC_VPRINTF
AC_CHECK_FUNCS(gettimeofday mkdir select socket strstr)
AC_CONFIG_FILES([Makefile po/Makefile.in])
AC_OUTPUT

dnl Display final configuration
echo "--------------------------------"
if test "${sdl}" = "true"; then
	echo "selected GUI is      SDL"
else
	echo "selected GUI is      X11"
    echo "sound compilation    $xbsndsrv"
fi
echo "mini compilation:    $mini"
echo "nat compilation:     $nat"
echo "SMPF compilation:    $smpf"
echo "datadir:             $game_datadir"
echo "--------------------------------"
